name: 'Update'
description: 'Update kubernetes configuration yamls and apply them to the current cluster'
author: 'JonathanAtCenterEdge'
branding:
  icon: upload-cloud
  color: blue
inputs:
  deployment:
    description: yaml file containing the deployment resource
    required: true
  container:
    description: Name of the container to target
    required: true
  image:
    description: Image string to replace in the targetted container deployment resource
    required: false
  env:
    description: List of environment variables, eg "[ 'TEST_ENV=QA', 'LOGGING=true' ]"
    required: false
  indention:
    description: Optionally specify the indention used for yq
    required: false
    default: "1"

runs:
  using: composite
  steps:
  - name: Init
    id: udy-init
    run: |
      if [ "$RUNNER_OS" != "Linux" ]; then
          echo "$RUNNER_OS not supported"
          exit 1
      fi

      if ! command -v yq >/dev/null 2>&1; then
        echo "yq is not installed. Please install yq version >= 4.x.x."
        exit 1
      fi

      yq_version=$(yq --version)
      if [[ ! "$yq_version" =~ 4\.[0-9]+\.[0-9]+ ]]; then
        echo "Invalid or unsupported yq version. Please install yq version >= 4.x.x."
        exit 1
      fi

      deployment=${{ inputs.deployment }}
      deployment=${deployment%.*}-udy-temp.${deployment##*.}
      cp ${{ inputs.deployment }} ${deployment}
      echo "deployment-temp=${deployment}" >> $GITHUB_OUTPUT
    shell: bash

  - name: Update image
    id: udy-update-image
    if: ${{ inputs.image }} != ""
    run: |
      yq --inplace --indent ${{ inputs.indention }} '(select(.spec.template.spec.containers[]) | .spec.template.spec.containers[] | select(.name == "${{ inputs.container }}"))
        .image |= "${{ inputs.image }}"' ${{ steps.udy-init.outputs.deployment-temp }}
    shell: bash

  - name: Update environment variables
    id: udy-update-env
    if: ${{ inputs.env }} != ""
    run: |
      # Remove leading and trailing whitespace
      param=$(echo "${{ inputs.env }}" | awk '{$1=$1};1')

      # Remove all newlines and whitespace between commas
      param=$(echo "$param" | tr -d '\n' | sed 's/, */,/g')

      # If the last character is not a comma, add a comma to ensure the final item is captured
      if [[ ! $param =~ ,$ ]]; then
        param+=","  # Add a comma to the end of the string
      fi

      # Split the modified string into an array
      IFS=',' read -ra items <<< "$param"

      # Loop through the array
      for item in "${items[@]}"; do
        # Remove leading and trailing whitespace
        item=$(echo "$item" | awk '{$1=$1};1')

        # Extract key and value
        IFS='=' read -r key value <<< "$item"

        export key
        export value

        yq --inplace --indent ${{ inputs.indention }} '(select(.spec.template.spec.containers[]) | .spec.template.spec.containers[] | select(.name == "${{ inputs.container }}"))
          .env |= map(select(.name == env(key)).value = env(value))' ${{ steps.udy-init.outputs.deployment-temp }}
      done
    shell: bash

  - run: |
      diff_output=$(diff --color=always -C 5 --ignore-space-change <(yq -P 'sort_keys(..)' ./deployment.yaml) <(yq -P 'sort_keys(..)' ${{ steps.udy-init.outputs.deployment-temp }})) || true
      echo -e "${diff_output}"
      mv  ${{ steps.udy-init.outputs.deployment-temp }} ${{ inputs.deployment }}
    shell: bash
